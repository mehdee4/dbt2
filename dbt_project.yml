# dbt_project.yml

name: 'dbt_project_2'
version: '1.0.0'                        # version number of your dbt project. Allows you to track changes and major milestones in your dbt project's development.
profile: 'dbt_project_2'                # It specifies which database connection profile (defined in your profiles.yml file) this dbt project should use when interacting with your data warehouse.
packages-install-path: "dbt_packages"   # This is the default and usually doesn't need to be explicitly set

vars:
  snowflake_schemas:
    - name: CONFIGS
    - name: RAW_DATA
    - name: STG_PIM
    - name: STG_SAP
    - name: ANALYTICS

  snowflake_file_formats:
    - name: CSV_FORMAT_DEFAULT
      options: |
        TYPE = CSV
        FIELD_DELIMITER = ','
        SKIP_HEADER = 1
        ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
        TRIM_SPACE = TRUE
    - name: CSV_NO_HEADER
      options: |
        TYPE = CSV
        FIELD_DELIMITER = ','
        SKIP_HEADER = 0
        TRIM_SPACE = TRUE
    - name: JSON_FORMAT_STRIP_OUTER_ARRAY
      options: |
        TYPE = JSON
        STRIP_OUTER_ARRAY = TRUE
        ALLOW_DUPLICATE = FALSE
    - name: PARQUET_FORMAT_DEFAULT
      options: |
        TYPE = PARQUET

  snowflake_stages:
    - name: S3_QUICKSTART
      url: 's3://sfquickstarts/tastybytes/'
      file_format_ref: CSV_FORMAT_DEFAULT
    - name: AZURE_DATA_LAKE_EXAMPLE
      url: 'azure://azuresnowflake.blob.core.windows.net/testdata/'
      file_format_ref: PARQUET_FORMAT_DEFAULT
    - name: MY_PRIVATE_S3_STAGE
      url: 's3://my-private-bucket/data/'
      file_format_ref: CSV_NO_HEADER
    - name: S3_QUICKSTART_test
      url: 's3://sfquickstarts/tastybytes/'
      file_format_ref: CSV_FORMAT_DEFAULT

model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

# used to configure which directories dbt should delete when you run the dbt clean command.
clean-targets:
  - "target"
  - "dbt_packages"


models:
  dbt_project_2: 
    stage: 
      stg_sap: # Configuration specific to the 'stg_sap' subdirectory within 'stage'
        +schema: stg_sap # Use +schema to explicitly set it to 'stg_sap', overriding any default- # This will create the schema 'stg_sap'
        +materialized: table
        +transient: true 
        +post-hook:
          - "{{ create_and_grant_schema_role(this.database, this.schema, target.name) }}"
        #+grants:  
            #    allows you to automatically apply SQL GRANT statements to the database objects (tables and views) that dbt creates or updates.
            #    example:
            #     +grants:    
                    #select: ["ANALYTICS_TEAM_ROLE"] # Applies to all models in this project by default
        # +materialized: <>
            #  view
            # table  Creates a physical table. It's fully rebuilt on every run (unless configured otherwise)
            #incremental: Creates a physical table. But new data inserted on incremental lbasis
        # +unique_key
            # for example  ["composite_key_part1", "composite_key_part2"] # For a composite unique key
        # +incremental_strategy: <strategy_name>
            # Merge, delete+insert etc. 
        # +database: <database_name> 
            #    Explicitly specifies the database where the model will be created.
        #+enabled: <true | false> 
            # Controls whether models in this path are included in dbt runs. 
            # Use Case: Temporarily disable a set of models without deleting them,
        #+tags: [<tag1>, <tag2>, ...] 
            # Assigns (dbt) tags to models for easier selection or exclusion. 
            #    Use Case: Running only specific groups of models (e.g., 'dbt run --select tag:daily_load').
        # +grants:
            #    Purpose: Defines explicit grants (permissions) on the created database objects.
            #    Use Case: Automatically apply permissions to roles when objects are created/recreated.
            #    Example (for Snowflake):
            # +grants:
            #     select: ["REPORTING_ROLE", "ANALYST_ROLE"]
            #     usage: ["DATA_SCIENCE_ROLE"] # For views/schemas
            #     monitor: ["DBT_MONITORING_ROLE"]
        #+full_refresh: <true | false>
            #    Purpose:  Forces a full recreation of the model.
            #    Use Case: When you make a breaking change or need to rebuild from scratch. 
        #+pre-hook: <SQL string or list of SQL strings>
            #    Purpose: Runs SQL commands *before* the model's main SELECT statement executes.
            #    Use Case: Creating temporary tables, setting session variables, specific logging.
            #    Example:
            # +pre-hook: 
            #.  _ "ALTER SESSION SET QUERY_TAG = 'dbt_sap_stg_load';"
            #   - "more;"
        #+post-hook: <SQL string or list of SQL strings>
             #    Runs SQL commands *after* the model's main SELECT statement executes.
             #    Example:
             # +post-hook: 
             #   - "ALTER {{ this }} SET TAG data_domain = 'SAP', cost_center = 'Operations';"
             #   - "ALTER {{ this }} SET TAG environment = '{{ target.name }}';" # Use dbt variables
             #   _ ALTER {{ this }} SET COMMENT = '{{
             #      tojson({
             #         "owner": this.meta.owner,
             #         "data_steward": this.meta.data_steward,
             #         "sla": this.meta.sla,
             #         "business_unit": this.meta.business_unit
             #      })
             #     }}';

        #+docs:
            #     show: true
            #     persist_docs: # Snowflake specific: persists descriptions from .yml files to Snowflake
            #       relation: true #  model descriptions
            #       columns: true  #  column descriptions
         # +alias: <alias_name>
            #    Purpose: Changes the name of the object created in the database, independent of the file name.
            #    Use Case: When the file name isn't suitable for the database object name, or for backward compatibility.
            #    Example:
            #      +alias: sap_menu_data_stg # The model file might be 'stg_menu.sql', but the table will be 'sap_menu_data_stg'
    config: 
      +schema: config 
      +materialized: table
      +transient: true 
      +post-hook:
        - "{{ create_and_grant_schema_role(this.database, this.schema, target.name) }}"
        - "{{ create_snowflake_file_formats(this.database, this.schema) }}"
        - "{{ create_snowflake_stages(this.database, this.schema) }}"
